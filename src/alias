#---------------------------------#
#------ taken from sum4n ---------#
#--------changes done to my conf--#
#---------------------------------#


#-------------#
#---- git-----#
#-------------#
#alias lg='lazygit'
alias gcl='git clone'
alias gin='git init'
alias gad='git add'
alias gcm='git commit -m'
alias gp='git push'
alias gst='git status'

#merge new settings
#alias merge="xrdb -merge ~/.Xresources"

#youtube download
alias yta-aac="yt-dlp --extract-audio --audio-format aac "
alias yta-best="yt-dlp --extract-audio --audio-format best "
alias yta-flac="yt-dlp --extract-audio --audio-format flac "
alias yta-mp3="yt-dlp --extract-audio --audio-format mp3 "
alias ytv-best="yt-dlp -f 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/bestvideo+bestaudio' --merge-output-format mp4 "


#EDITOR for important configuration files
alias efstab="sudoedit /etc/fstab"
alias ebsh="$EDITOR ~/.bashrc"
alias ezsh="$EDITOR ~/.config/zsh/.zshrc"
alias efish="$EDITOR ~/.config/fish/config.fish"


# # ex = EXtractor for all kinds of archives
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1   ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *.deb)       ar x $1      ;;
      *.tar.xz)    tar xf $1    ;;
      *.tar.zst)   tar xf $1    ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

#---------------------------------#
#------ taken from cloudlena------#
#---------------------------------#

# Create a directory and enter it
mkcd() {
	mkdir --parents "$@" && cd "$_" || exit
}

# cd into directory using fuzzy search
fcd() {
	local dir
	dir=$(fd --type d --follow | fzf --preview 'tree -l -L 1 {}' +m) &&
		cd "$dir"
}

# Edit a directory or a file using fuzzy search
fe() {
	local target fzf_cmd
	fzf_cmd='fd --follow --hidden --no-ignore \
        --exclude .git \
        --exclude vendor \
        --exclude node_modules \
        --exclude .terraform \
        --exclude target \
        --exclude bin \
        --exclude build \
        --exclude dist \
        --exclude coverage \
        --exclude .DS_Store'
	target=$(eval $fzf_cmd | fzf +m) &&
		if [ -d "$target" ]; then
			cd "$target" && "$EDITOR"
		fi
	if [ -f "$target" ]; then
		"$EDITOR" "$target"
	fi
}

# Checkout Git branches or tags using fuzzy search
fco() {
	local tags branches target
	tags=$(
		git tag | awk '{print "\x1b[31;1mtag\x1b[m\t" $1}'
	) || return
	branches=$(
		git branch --all | grep -v HEAD |
			sed "s/.* //" | sed "s#remotes/[^/]*/##" |
			sort -u | awk '{print "\x1b[34;1mbranch\x1b[m\t" $1}'
	) || return
	target=$(
		(
			echo "$tags"
			echo "$branches"
		) |
			fzf-tmux -l30 -- --no-hscroll --ansi +m -d "\t" -n 2
	) || return
	git checkout "$(echo "$target" | awk '{print $2}')"
}

# Kill any process with fuzzy search
fkill() {
	local pid
	if [ "$UID" != "0" ]; then
		pid=$(ps -f -u $UID | sed 1d | fzf -m | awk '{print $2}')
	else
		pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')
	fi

	if [ "x$pid" != "x" ]; then
		echo "$pid" | xargs kill "-${1:-9}"
	fi
}

# Git commit browser with fuzzy search
fshow() {
	git log --graph --color=always \
		--format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
		fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
			--bind "ctrl-m:execute:
            (grep -o '[a-f0-9]\{7\}' | head -1 |
            xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
            {}
FZF-EOF"
}


# Update project dependencies
depu() {
	# Git submodules
	if [ -e .gitmodules ]; then
		printf "Updating Git submodules for %s...\n\n" "${PWD##*/}"
		git submodule update --init --remote --rebase --recursive
	fi

	# npm
	if [ -e package-lock.json ]; then
		printf "Updating npm dependencies for %s...\n\n" "${PWD##*/}"
		npm update
		npm outdated
	fi

	# Go
	if [ -e go.mod ]; then
		printf "Updating Go dependencies for %s...\n\n" "${PWD##*/}"
		go get -t -u ./...
		go mod tidy
	fi

	# Rust
	if [ -e Cargo.toml ]; then
		printf "Updating Cargo dependencies for %s...\n\n" "${PWD##*/}"
		cargo update
	fi

	# Python
	if [ -e poetry.lock ]; then
		printf "Updating Python dependencies for %s...\n\n" "${PWD##*/}"
		poetry update
		poetry show --outdated
	fi

	# Terraform
	if [ -e .terraform.lock.hcl ]; then
		printf "Updating Terraform dependencies for %s...\n\n" "${PWD##*/}"
		terraform init -upgrade
	fi
}
